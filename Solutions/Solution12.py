# The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
#
# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
#
# Let us list the factors of the first seven triangle numbers:
#
# 1: 1
# 3: 1,3
# 6: 1,2,3,6
# 10: 1,2,5,10
# 15: 1,3,5,15
# 21: 1,3,7,21
# 28: 1,2,4,7,14,28
# We can see that 28 is the first triangle number to have over five divisors.
#
# What is the value of the first triangle number to have over five hundred divisors?
import timeit

start = timeit.default_timer()

def divisorCount(number):
    count = 0
    for i in range(1,(int)((number**(1/2)) + 1)) :
        if (number % i == 0) :
            if (number / i == i) :
                count+=1
            else:
                count+=2
    return count

def findTriangleNumber(number):
    n=1
    while divisorCount((n*(n+1)/2))<number:
        n+=1
    return [n,int(((n*(n+1)/2))),divisorCount((n*(n+1)/2))]
print(findTriangleNumber(500))
stop = timeit.default_timer()

print('Time: ', stop - start)  